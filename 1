import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import glob
import torchvision.io
import torch
from torchvision import models, transforms
from PIL import Image
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import decode_predictions, preprocess_input

guitars = []
piano = []
drums = []


def Gray_Image(img):

    print(img)

    img = cv2.resize(img, (300, 300))
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    var, threshold_image = cv2.threshold(gray_img, 100, 100, cv2.THRESH_BINARY)
    cv2.imshow("OpenCv Window", img)
    cv2.imshow("OpenCV THRESHOLD IMAGE", threshold_image)
    cv2.waitKey()
    cv2.destroyAllWindows()


def Contour_Image_guitar(image):

    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    plt.imshow(gray, cmap='gray')

    blur = cv2.GaussianBlur(gray, (11, 11), 0)
    plt.imshow(blur, cmap='gray')

    canny = cv2.Canny(blur, 30, 150, 3)
    plt.imshow(canny, cmap='gray')

    dilated = cv2.dilate(canny, (1, 1), iterations=0)
    plt.imshow(dilated, cmap='gray')

    (cnt, hierarchy) = cv2.findContours(
        dilated.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    cv2.drawContours(rgb, cnt, -1, (0, 255, 0), 2)

    plt.imshow(rgb)

    guitars.append(rgb)

    cv2.imshow("Image", rgb)
    cv2.waitKey(2000)
    cv2.destroyAllWindows()

    return rgb


def RecogniseImage():
    # Load a pre-trained ResNet model
    model = models.resnet50(pretrained=True)
    model.eval()  # Set the model to evaluation mode

    # Load and preprocess the image
    img_path = 'guitar1.jpeg'  # Change this to your image path
    img = Image.open(img_path)
    preprocess = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    img_tensor = preprocess(img).unsqueeze(0)  # Add batch dimension

    # Perform prediction
    with torch.no_grad():
        output = model(img_tensor)

    # Get the predicted class
    _, predicted_class = torch.max(output, 1)
    print(f"Predicted class ID: {predicted_class.item()}")


def ImageRecognition():

    model = ResNet50(weights='imagenet')
    # Load the image you want to classify
    img_path = "guitar2.jpeg"  # Provide your image path here
    img = image.load_img(img_path, target_size=(224, 224))  # ResNet50 expects 224x224 input

    # Convert the image to a numpy array and preprocess it
    img_array = image.img_to_array(img)
    img_array = tf.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array = preprocess_input(img_array)  # Preprocess for ResNet50

    # Get predictions
    predictions = model.predict(img_array)

    # Decode the predictions (class indices to human-readable labels)
    decoded_predictions = decode_predictions(predictions, top=1)[0]  # Top-3 predictions

    # Print top 3 predictions
    for i, (imagenet_id, label, score) in enumerate(decoded_predictions):
        print(f"Prediction: {label} with probability {score:.2f}")


# Specify the directory containing the images
directory = "C:\\Users\\liese\\OneDrive\\Bureaublad\\ai\\Guitar image - Copy"
images_to_read = 10  # Specify how many images you want to read

# List all files in the directory
for filename in os.listdir(directory):
    if filename.endswith(('.png', '.jpg', '.jpeg', '.gif')):  # Check for image file types
        img_path = os.path.join(directory, filename)
        img = cv2.imread(img_path)
        guitars.append(img)

#for i in range(len(guitars)):
 #   image = guitars[i]
  #  RecogniseImage(image)

ImageRecognition()
